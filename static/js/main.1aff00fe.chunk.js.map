{"version":3,"sources":["components/Input.jsx","components/Header.jsx","components/GridDemo.jsx","components/GiphyGrid.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Input","onSearch","useState","text","setText","Form","onSubmit","e","preventDefault","search","console","log","match","RegExp","alert","FormGroup","legendText","Search","className","labelText","placeHolderText","value","onChange","target","Button","type","Header","gf","GiphyFetch","GridDemo","searchTerm","onGifClick","window","innerWidth","width","setWidth","useEffect","addEventListener","onResize","fetchGifs","offset","limit","columns","gutter","borderRadius","GiphyGrid","modalGif","setModalGif","resizing","_","removeEventListener","gif","style","position","top","left","right","bottom","display","justifyContent","alignItems","background","onClick","undefined","App","term","setTerm","task","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1aff00fe.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Form, Button, FormGroup, Search} from 'carbon-components-react'\n\nconst Input = ({ onSearch }) => {\n    const [text, setText] = useState(\"\");\n\n    const onSubmit = (e) => {\n        e.preventDefault(); // Prevents page refresh\n\n        if (!text) {    // Search is empty\n            alert(\"Please put a keyword\");\n            return;\n        }\n        else if (text.search(/[^\\w\\s]/g) != -1){    // Search contains non-word (or whitespace) characters\n            console.log(text.search(/[^\\w\\s]/g), text.match(new RegExp('[^\\w\\s]')));\n            alert(\"Please put only words or numbers\");\n            return;\n        }\n        onSearch({ text });\n\n        setText(\"\");    // Resets input text\n    };\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <FormGroup legendText=\"\">\n                <Search \n                    className=\"search-input\"\n                    labelText=\"Search gif\"\n                    placeHolderText=\"Please enter your search here :)\"\n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                />\n\n            </FormGroup>\n\n            <Button type=\"submit\">\n                Begin the journey\n            </Button>\n        </Form>\n    )\n}\n\nexport default Input\n","import Input from './Input'\n\n\n// const onSubmitSearch = (task) => {\n//     console.log(\"On click\", task);\n// }\n\nconst Header = ({ onSearch }) => {\n    return (\n        <div>\n            <h1>Search for Gifs by a word or a phrase</h1>\n            <Input onSearch={onSearch}/>\n        </div>\n    )\n}\n\nexport default Header\n ","import { useState, useEffect } from 'react';\nimport { Grid } from '@giphy/react-components';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\n\nconst API_KEY = 'sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh'; // 'FTiLvKAABFupjkqCUeUr7Eb0fUa0gyOo';  ////'// // \n\nconst gf = new GiphyFetch(API_KEY);\n\nconst GridDemo = ({ searchTerm, onGifClick }) => {\n    const [width, setWidth] = useState(window.innerWidth * .9); // Main gif grid is 90 viewport width for styling\n\n    // Resizing grid\n    useEffect(() => {\n        window.addEventListener('resize', () => setWidth(window.innerWidth * .9));\n    }, [width])\n\n    const fetchGifs = (offset) => gf.search(searchTerm, { offset, limit: 12 });\n    return (\n        <div onResize={({ width }) => setWidth(width)}>\n            <Grid\n                key={searchTerm}\n                onGifClick={onGifClick}\n                fetchGifs={fetchGifs}\n                width={width}\n                columns={4}\n                gutter={10}         // Gaps between gifs\n                borderRadius={30}   // Rounding the gifs\n            />\n        </div>\n    );\n}\n\nexport default GridDemo;","import { useState, useEffect } from 'react';\nimport { Gif } from '@giphy/react-components';\nimport GridDemo from './GridDemo';\nimport { CloseFilled32 } from \"@carbon/icons-react\";\n\n\nconst GiphyGrid = ({ searchTerm }) => {\n    const [modalGif, setModalGif] = useState();\n    const [width, setWidth] = useState(window.innerWidth / 3);\n\n    // Resizing popup gif\n    useEffect(() => {\n        function resizing() { setWidth(window.innerWidth / 3); }\n        window.addEventListener('resize', resizing);\n        // Cleaning up to prevent memory leak (https://www.pluralsight.com/guides/re-render-react-component-on-window-resize)\n        return _ => { window.removeEventListener('resize', resizing); }\n    }, [width]);\n\n    return (\n        <div className=\"main-gif-grid\">\n            <GridDemo                   // Main grid of gifs\n                searchTerm={searchTerm}\n                onGifClick={(gif, e) => {\n                    e.preventDefault(); // Preventing a tag href to giphy\n                    setModalGif(gif);   // Creating gif popup\n                }}\n            />\n            {modalGif && (              // Popup gif (if it is defined)\n                <div\n                    style={{\n                        position: \"fixed\",\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        background: \"rgba(0, 0, 0, .8)\",\n                    }}\n                    onClick={e => {\n                        e.preventDefault(); // Not opening link to giphy\n                    }}\n                >\n                    <div style={{ width: '33.3vw' }}>\n                        <Gif className=\"popup-gif\" gif={modalGif} width={width} />  {/* The main popup gif */}\n                        <div className=\"popup-close-div\" onClick={() => setModalGif(undefined)}>\n                            Close Gif\n                            <CloseFilled32 className=\"btn-close\"/>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default GiphyGrid\n","import './App.css';\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport GiphyGrid from './components/GiphyGrid';\n\n\nfunction App() {\n  const [term, setTerm] = useState('doggo'); // Default search is / doggo\n  /**\n   * Getting user input from the form and sending it to gif search API\n   * @param {element} task element which has user search input\n   */\n  const onSubmitSearch = (task) => {\n    console.log(\"Entered keywoard:\", task.text);\n    setTerm(task.text);\n  }\n  // FIXME: Also, need to build react with npm build or something like that\n  return (\n    <div className=\"App\">\n      <Header onSearch={onSubmitSearch} />\n      <hr/>\n      <GiphyGrid searchTerm={term}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}